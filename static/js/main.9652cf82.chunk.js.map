{"version":3,"sources":["components/catcards/index.js","components/wrapper/index.js","components/title/index.js","components/score/index.js","components/instructions/index.js","components/result/index.js","App.js","index.js"],"names":["CatCard","props","react_default","a","createElement","className","id","onClick","checkAndShuffle","name","alt","src","image","Wrapper","children","Title","Score","score","Instructions","Result","App","state","cats","guessed","shuffleFunction","reshuffle","_this","i","length","randomIndex","Math","floor","random","itemAtIndex","setState","reset","includes","console","log","push","alert","_this2","this","wrapper","title","instructions","map","cat","catcards","key","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"q6CA4BeA,MAzBf,SAAiBC,GACf,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,eAAeD,UAAU,mBAAmBE,QAAS,kBAAMN,EAAMO,gBAAgBP,EAAMQ,QAC7FP,EAAAC,EAAAC,cAAA,OAAKM,IAAKT,EAAMQ,KAAMH,GAAIL,EAAMQ,KAAME,IAAKV,EAAMW,iBCA1CC,MAJf,SAAiBZ,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMa,iBCG1BC,MAJf,SAAed,GACb,OAAOC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sBAAsBC,GAAG,SAASL,EAAMa,iBCGhDE,MAJf,SAAef,GACb,OAAOC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,qBAAqBC,GAAG,SAAxC,kBAAgEL,EAAMa,SAAUb,EAAMgB,cCGhFC,MAJf,SAAsBjB,GACpB,OAAOC,EAAAC,EAAAC,cAAA,QAAME,GAAG,eAAeD,UAAU,gBAAlC,8EAA4HH,EAAAC,EAAAC,cAAA,WAA5H,8FCYMe,ICgFAC,6MApFbC,MAAQ,CACNC,KAAMA,EACNL,MAAO,EACPM,QAAS,MAIXC,gBAAkB,WAEhB,IADA,IAAIC,EAAYC,EAAKL,MAAMC,KAClBK,EAAIF,EAAUG,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAME,EAAcC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IAChDM,EAAcR,EAAUI,GAC5BJ,EAAUI,GAAeJ,EAAUE,GACnCF,EAAUE,GAAKM,EAEjBP,EAAKQ,SAAS,CACZZ,KAAMG,OAIZU,MAAQ,WACNT,EAAKQ,SAAS,CACZX,QAAQ,GACRN,MAAO,OAMfT,gBAAkB,SAACF,GAGdoB,EAAKL,MAAME,QAAQa,SAAS9B,IAC7B+B,QAAQC,IAAIhC,GACZ+B,QAAQC,IAAIZ,EAAKL,OACjBgB,QAAQC,IAAI,cACZZ,EAAKS,QAELT,EAAKF,oBAGPE,EAAKF,kBACLE,EAAKL,MAAME,QAAQgB,KAAKjC,GACxBoB,EAAKQ,SAAS,CACZjB,MAAOS,EAAKL,MAAMJ,MAAM,IAGF,IAArBS,EAAKL,MAAMJ,QACZuB,MAAM,YACNd,EAAKS,QACLT,EAAKF,mBAEPa,QAAQC,IAAIZ,EAAKL,iFAOV,IAAAoB,EAAAC,KACP,OACExC,EAAAC,EAAAC,cAACuC,EAAD,KACEzC,EAAAC,EAAAC,cAACwC,EAAD,wBACA1C,EAAAC,EAAAC,cAACyC,EAAD,MACA3C,EAAAC,EAAAC,cAACa,EAAD,CACAA,MAAOyB,KAAKrB,MAAMJ,QAEjByB,KAAKrB,MAAMC,KAAKwB,IAAI,SAAAC,GAAG,OACtB7C,EAAAC,EAAAC,cAAC4C,EAAD,CACExC,gBAAiBiC,EAAKjC,gBACtBF,GAAIyC,EAAIzC,GACR2C,IAAKF,EAAIzC,GACTG,KAAMsC,EAAItC,KACVG,MAAOmC,EAAInC,kBA3EHsC,mBCLlBC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.9652cf82.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction CatCard(props) {\n  return (\n    <div className=\"card\">\n      <div id=\"imgcontainer\" className=\"animated flipInX\" onClick={() => props.checkAndShuffle(props.name)}>\n        <img alt={props.name} id={props.name} src={props.image} />\n      </div>\n    </div>\n  );\n}\n\n\n// let score = 0;\n\n// adjustScore => (props) {\n// if(props.clicked === 0){\n//   score++\n//   props.clicked = 1\n//   props.shuffleCats() \n// } else {\n//   score = 0;\n// }\n// }\n\n\n\nexport default CatCard;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"animated rubberBand\" id=\"title\">{props.children}</h1>  \n}\n\nexport default Title;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Score(props) {\n  return <span className=\"animated heartBeat\" id=\"score\">Current Score: {props.children}{props.score}</span>;\n}\n\nexport default Score;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Instructions(props) {\n  return <span id=\"instructions\" className=\"instructions\">Test your memory and click through each fat cat image without any repeats! <br></br>Every time you click the images will re-shuffle. Try to reach a perfect score of 9!</span>;\n}\n\nexport default Instructions;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Result(props) {\nconsole.log(\"hello\")\nif(props.score === 9){\n    return <span id=\"result\"className=\"winResult\">\"You Win!!!\"</span>;\n} \nelse if(props.score === 0){\n        return <span id=\"result\" className=\"loseResult\">\"Game Over!\"</span>; \n} \nelse {\n        return <span id=\"result\" className=\"blank\"></span>; \n}\n}\n\nexport default Result;","import React, { Component } from \"react\";\nimport './App.css';\nimport cats from \"./cats.json\";\nimport CatCard from \"./components/catcards\";\nimport Wrapper from \"./components/wrapper/index\";\nimport Title from \"./components/title\";\nimport Score from \"./components/score\";\nimport Instructions from \"./components/instructions\";\nimport Result from \"./components/result\";\n\nclass App extends Component {\n  // Setting this.state.cats to the cats json array\n  state = {\n    cats: cats,\n    score: 0,\n    guessed: []\n  };\n\n  // function to shuffle the array of cats, and re setState with the new shuffled array\n  shuffleFunction = () => {\n    let reshuffle = this.state.cats\n    for (let i = reshuffle.length - 1; i > 0; i--) {\n          const randomIndex = Math.floor(Math.random() * (i + 1));\n          var itemAtIndex = reshuffle[randomIndex];         \n          reshuffle[randomIndex] = reshuffle[i]; \n          reshuffle[i] = itemAtIndex;\n        }\n        this.setState({\n          cats: reshuffle,\n        })\n    }    \n\n    reset = () => {\n      this.setState({\n        guessed:[],\n        score: 0\n        })\n    }\n\n// this function will be called each time a cat image is clicked. The click event passes the id of the cat selected \n// into the function\ncheckAndShuffle = (id) => {\n  \n  // check and see if the cat guessed has already been guessed. If it has, reset the array of guesses to empty and the score to 0\n  if(this.state.guessed.includes(id)){\n    console.log(id)\n    console.log(this.state)\n    console.log(\"Game Over!\");\n    this.reset();\n    \n    this.shuffleFunction();\n  } else {\n    // if it hasn't, push the photo id into the array of guesses and shuffle the cats\n  this.shuffleFunction();\n  this.state.guessed.push(id)\n  this.setState({\n    score: this.state.score+1\n  })\n  // if the guess count has reached 9, alert user has won, reshuffle, and reset\n  if(this.state.score === 9){\n    alert(\"You Win!\");\n    this.reset()\n    this.shuffleFunction()\n  }\n  console.log(this.state)\n}\n};\n\n\n\n// Map over this.state.cats and render a CatCard component for each cat object\nrender() {\n  return (\n    <Wrapper>\n      <Title>Fat Cat Shuffle</Title>\n      <Instructions></Instructions>\n      <Score \n      score={this.state.score}\n      />\n      {this.state.cats.map(cat => (\n        <CatCard\n          checkAndShuffle={this.checkAndShuffle}\n          id={cat.id}\n          key={cat.id}\n          name={cat.name}\n          image={cat.image}\n\n        />\n      ))}\n    </Wrapper>\n  );\n}\n}\n\n\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}